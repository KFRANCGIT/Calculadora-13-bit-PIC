CCS PCH C Compiler, Version 5.012, 41559               29-mar.-17 22:22

               Filename:   D:\OneDrive\INGENIERIA TELEMATICA\4° Semestre\Sistemas Embebidos\PRACTICAS PROGRAMACION\PRACTICA 2\Calculadora-13-bit-PIC\main.lst

               ROM used:   574 bytes (1%)
                           Largest free fragment is 64962
               RAM used:   8 (0%) at main() level
                           19 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
00000:  GOTO   00D6
.................... #include <18f4620.h> 
.................... ///////////// Standard Header file for the PIC18F4620 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4620 
00004:  MOVF   0F,W
00006:  MULWF  11
00008:  MOVFF  FF3,01
0000C:  MOVFF  FF4,00
00010:  MULWF  12
00012:  MOVF   FF3,W
00014:  ADDWF  00,F
00016:  MOVF   10,W
00018:  MULWF  11
0001A:  MOVF   FF3,W
0001C:  ADDWFC 00,W
0001E:  MOVWF  02
00020:  GOTO   01B8 (RETURN)
00024:  CLRF   01
00026:  CLRF   02
00028:  CLRF   00
0002A:  CLRF   03
0002C:  MOVF   12,W
0002E:  BNZ   0034
00030:  MOVF   11,W
00032:  BZ    0064
00034:  MOVLW  10
00036:  MOVWF  13
00038:  BCF    FD8.0
0003A:  RLCF   0F,F
0003C:  RLCF   10,F
0003E:  RLCF   00,F
00040:  RLCF   03,F
00042:  MOVF   12,W
00044:  SUBWF  03,W
00046:  BNZ   004C
00048:  MOVF   11,W
0004A:  SUBWF  00,W
0004C:  BNC   005C
0004E:  MOVF   11,W
00050:  SUBWF  00,F
00052:  BTFSS  FD8.0
00054:  DECF   03,F
00056:  MOVF   12,W
00058:  SUBWF  03,F
0005A:  BSF    FD8.0
0005C:  RLCF   01,F
0005E:  RLCF   02,F
00060:  DECFSZ 13,F
00062:  BRA    0038
00064:  GOTO   01EC (RETURN)
....................  
.................... #list 
....................  
.................... #use delay(clock=16M) 
*
000AC:  CLRF   FEA
000AE:  MOVLW  0B
000B0:  MOVWF  FE9
000B2:  MOVF   FEF,W
000B4:  BZ    00D2
000B6:  MOVLW  05
000B8:  MOVWF  01
000BA:  CLRF   00
000BC:  DECFSZ 00,F
000BE:  BRA    00BC
000C0:  DECFSZ 01,F
000C2:  BRA    00BA
000C4:  MOVLW  2E
000C6:  MOVWF  00
000C8:  DECFSZ 00,F
000CA:  BRA    00C8
000CC:  BRA    00CE
000CE:  DECFSZ FEF,F
000D0:  BRA    00B6
000D2:  GOTO   0208 (RETURN)
.................... #fuses XT, NOFCMEN, NOIESO, PUT, NOBROWNOUT, NOWDT 
.................... #fuses NOPBADEN, NOMCLR, STVREN, NOLVP, NODEBUG 
....................  
.................... void outputResultado13b(int16 res);   //Funcion para enviar resultado a los puertos A,B,E de los pines correspondientes 
....................  
.................... void main(void){ 
000D6:  CLRF   FF8
000D8:  BCF    FD0.7
000DA:  MOVF   FC1,W
000DC:  ANDLW  C0
000DE:  IORLW  0F
000E0:  MOVWF  FC1
000E2:  MOVLW  07
000E4:  MOVWF  FB4
....................        
....................       setup_oscillator(OSC_normal); 
000E6:  CLRF   FD3
000E8:  MOVF   FD3,W
....................       setup_adc(NO_ANALOGS); 
000EA:  MOVF   FC0,W
000EC:  ANDLW  C0
000EE:  IORLW  0F
000F0:  MOVWF  FC0
000F2:  BCF    FC0.7
000F4:  BSF    FC2.0
....................        
....................        //Activacion de entradas y salidas correspondientes en los puertos 
....................       SET_TRIS_A(0x00); 
000F6:  MOVLW  00
000F8:  MOVWF  F92
....................       SET_TRIS_E(0x08); 
000FA:  BCF    F96.0
000FC:  BCF    F96.1
000FE:  BCF    F96.2
00100:  BSF    F96.3
....................       SET_TRIS_B(0xF0);  
00102:  MOVLW  F0
00104:  MOVWF  F93
....................       SET_TRIS_C(0xFF); 
00106:  MOVLW  FF
00108:  MOVWF  F94
....................       SET_TRIS_D(0xFF); 
0010A:  MOVWF  F95
....................        
....................       unsigned int8 numeroUno = 0;               // Se puede reemplazar esto al leerlo directamente y operarlo     
....................       unsigned int8 numeroDos = 0;      
....................       int16 resultado = 0;                       //Variable resultado para almacenar resultados de operacion 
....................       unsigned int8 banderasOperaciones = 0;     //Variable usada para uso de banderas y control de operaciones 
....................      
....................       //Declaracion de bits a partir de BanderasOperaciones 
....................       #bit banderaError = banderasOperaciones.2; 
0010C:  CLRF   05
0010E:  CLRF   06
00110:  CLRF   08
00112:  CLRF   07
00114:  CLRF   09
....................       #bit banderaContador = banderasOperaciones.3; 
....................       #bit suma = banderasOperaciones.4; 
....................       #bit resta = banderasOperaciones.5; 
....................       #bit multiplicacion = banderasOperaciones.6; 
....................       #bit division = banderasOperaciones.7; 
....................        
....................       //Inicalización de variables 
....................       int contador = 50; 
00116:  MOVLW  32
00118:  MOVWF  0A
....................        
....................       while(true){ 
....................          //Inicializacion bandera error 
....................          banderaError = 0; 
0011A:  BCF    09.2
....................           
....................          //Lectura de operandos 
....................          numeroUno = input_c(); 
0011C:  SETF   F94
0011E:  MOVFF  F82,05
....................          numeroDos = input_d(); 
00122:  SETF   F95
00124:  MOVFF  F83,06
....................           
....................          //Evaluación de boton presionado y activado de bandera correspondiente  
....................          //a operacion a realizar 
....................           
....................          if(input(PIN_B4)){ 
00128:  BSF    F93.4
0012A:  BTFSS  F81.4
0012C:  BRA    0138
....................             suma = 1; 
0012E:  BSF    09.4
....................             resta = 0; 
00130:  BCF    09.5
....................             multiplicacion = 0; 
00132:  BCF    09.6
....................             division = 0; 
00134:  BCF    09.7
....................          }  
00136:  BRA    0166
....................          else if(input(PIN_B5)){ 
00138:  BSF    F93.5
0013A:  BTFSS  F81.5
0013C:  BRA    0148
....................             suma = 0; 
0013E:  BCF    09.4
....................             resta = 1; 
00140:  BSF    09.5
....................             multiplicacion = 0; 
00142:  BCF    09.6
....................             division = 0; 
00144:  BCF    09.7
....................          }  
00146:  BRA    0166
....................          else if(input(PIN_B6)){ 
00148:  BSF    F93.6
0014A:  BTFSS  F81.6
0014C:  BRA    0158
....................             suma = 0; 
0014E:  BCF    09.4
....................             resta = 0; 
00150:  BCF    09.5
....................             multiplicacion = 1; 
00152:  BSF    09.6
....................             division = 0;            
00154:  BCF    09.7
....................          }  
00156:  BRA    0166
....................          else if(input(PIN_B7)){ 
00158:  BSF    F93.7
0015A:  BTFSS  F81.7
0015C:  BRA    0166
....................              suma = 0; 
0015E:  BCF    09.4
....................             resta = 0; 
00160:  BCF    09.5
....................             multiplicacion = 0; 
00162:  BCF    09.6
....................             division = 1; 
00164:  BSF    09.7
....................          } 
....................           
....................          //Realización de calculo a partir de la operacion activa 
....................          if(suma){ 
00166:  BTFSS  09.4
00168:  BRA    017C
....................             resultado = (long)numeroUno + (long)numeroDos; 
0016A:  CLRF   0C
0016C:  CLRF   03
0016E:  MOVF   06,W
00170:  ADDWF  05,W
00172:  MOVWF  07
00174:  MOVF   03,W
00176:  ADDWFC 0C,W
00178:  MOVWF  08
....................          }  
0017A:  BRA    022C
....................          else if(resta){ 
0017C:  BTFSS  09.5
0017E:  BRA    0192
....................             resultado = (long)numeroUno - (long)numeroDos; 
00180:  CLRF   0C
00182:  CLRF   03
00184:  MOVF   06,W
00186:  SUBWF  05,W
00188:  MOVWF  07
0018A:  MOVF   03,W
0018C:  SUBWFB 0C,W
0018E:  MOVWF  08
....................          }  
00190:  BRA    022C
....................          else if(multiplicacion){ 
00192:  BTFSS  09.6
00194:  BRA    01C2
....................             resultado = (long)numeroUno * (long)numeroDos;      
00196:  CLRF   0C
00198:  MOVFF  05,0B
0019C:  CLRF   03
0019E:  MOVFF  06,0D
001A2:  MOVFF  03,0E
001A6:  MOVFF  0C,10
001AA:  MOVFF  05,0F
001AE:  MOVFF  03,12
001B2:  MOVFF  06,11
001B6:  BRA    0004
001B8:  MOVFF  02,08
001BC:  MOVFF  01,07
....................          }  
001C0:  BRA    022C
....................          else if(division){ 
001C2:  BTFSS  09.7
001C4:  BRA    022C
....................              if(numeroDos != 0){ 
001C6:  MOVF   06,F
001C8:  BZ    0200
....................                resultado = (long)numeroUno / (long)numeroDos; 
001CA:  CLRF   0C
001CC:  MOVFF  05,0B
001D0:  CLRF   03
001D2:  MOVFF  06,0D
001D6:  MOVFF  03,0E
001DA:  MOVFF  0C,10
001DE:  MOVFF  05,0F
001E2:  MOVFF  03,12
001E6:  MOVFF  06,11
001EA:  BRA    0024
001EC:  MOVFF  02,08
001F0:  MOVFF  01,07
....................                outputResultado13b(resultado); 
001F4:  MOVFF  08,0C
001F8:  MOVFF  07,0B
001FC:  RCALL  0068
....................                 
....................             }  
001FE:  BRA    022C
....................             else{ 
....................                banderaError = 1;  //Bandera error Activa 
00200:  BSF    09.2
....................                 
....................                delay_ms(10); 
00202:  MOVLW  0A
00204:  MOVWF  0B
00206:  BRA    00AC
....................                contador ++; 
00208:  INCF   0A,F
....................                if(contador == 50){ 
0020A:  MOVF   0A,W
0020C:  SUBLW  32
0020E:  BNZ   022C
....................                   if(banderaContador == 1){ 
00210:  BTFSS  09.3
00212:  BRA    0222
....................                      outputResultado13b(8191); 
00214:  MOVLW  1F
00216:  MOVWF  0C
00218:  SETF   0B
0021A:  RCALL  0068
....................                       banderaContador = 0; 
0021C:  BCF    09.3
....................                      contador = 0; 
0021E:  CLRF   0A
....................                      
....................                   } 
00220:  BRA    022C
....................                   else{ 
....................                      outputResultado13b(0); 
00222:  CLRF   0C
00224:  CLRF   0B
00226:  RCALL  0068
....................                      banderaContador = 1; 
00228:  BSF    09.3
....................                      contador = 0; 
0022A:  CLRF   0A
....................                   }        
....................               }        
....................             } 
....................          } 
....................           
....................          //Muestra de variable resultado solo si no se enecuentra activo el error de division. 
....................          if(banderaError == 0) 
0022C:  BTFSC  09.2
0022E:  BRA    023A
....................             outputResultado13b(resultado); 
00230:  MOVFF  08,0C
00234:  MOVFF  07,0B
00238:  RCALL  0068
0023A:  BRA    011A
....................    } 
....................  
.................... } 
....................         
0023C:  SLEEP 
....................  
.................... void outputResultado13b(int16 res){ 
....................    OUTPUT_A(res); 
*
00068:  CLRF   F92
0006A:  MOVFF  0B,F89
....................    OUTPUT_B(res>>6); 
0006E:  RRCF   0C,W
00070:  MOVWF  0E
00072:  RRCF   0B,W
00074:  MOVWF  0D
00076:  RRCF   0E,F
00078:  RRCF   0D,F
0007A:  RRCF   0E,F
0007C:  RRCF   0D,F
0007E:  RRCF   0E,F
00080:  RRCF   0D,F
00082:  RRCF   0E,F
00084:  RRCF   0D,F
00086:  RRCF   0E,F
00088:  RRCF   0D,F
0008A:  MOVLW  03
0008C:  ANDWF  0E,F
0008E:  CLRF   F93
00090:  MOVFF  0D,F8A
....................    OUTPUT_E(res>>10); 
00094:  RRCF   0C,W
00096:  MOVWF  0D
00098:  RRCF   0D,F
0009A:  MOVLW  3F
0009C:  ANDWF  0D,F
0009E:  BCF    F96.0
000A0:  BCF    F96.1
000A2:  BCF    F96.2
000A4:  BCF    F96.3
000A6:  MOVFF  0D,F8D
000AA:  RETURN 0
.................... } 
....................  

Configuration Fuses:
   Word  1: 0100   XT NOFCMEN NOIESO
   Word  2: 1E18   PUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
